name: Automatic Training
on:
  push:
    branches: [main]

env:
  IMAGE_NAME: mlops-ci-image
  RESOURCE_GROUP: mlops-rg
  WORKSPACE: azure-ml-toyota-demo

jobs:
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'environment_setup/**'

      - name: Build and Push
        if: steps.filter.outputs.workflows == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./environment_setup/
          tags: |
            ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  connect-to-azure:
    needs: build-and-push-docker-image
    name: Connect to Azure
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/${{gitub.actor}}/${{env.IMAGE_NAME}}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AZ Configs
        run: |
          az configure -â€“defaults \
              group=${{ inputs.RESOURCE_GROUP }} \
              workspace={{ env.WORKSPACE}}

      - name: Produce AML Config
        run: |
          # We assume this SP only has one subscription
          SUBSCRIPTION=$(az account list --query [0].id)
          # Create a config object from our parameters using jq
          JSON_STRING=$(jq -n
              --arg sub $SUBSCRIPTION \
              --arg rg ${{ env.RESOURCE_GROUP }} \
              --arg ws ${{ env.WORKSPACE }} \
              '{subscription_id: $sub, resource_group: $rg, workspace_name: $ws}')
          # Write the json string to the current repo
          echo -e $JSON_STRING >> $PWD/config.json
